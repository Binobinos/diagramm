import asyncio
import datetime
from uuid import uuid4

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from handlers import helps_handlers
import config
from DB.db import DB
from keyboards.keyboard import *
from model.order import Orders
from model.reqwest import Reqwest
from model.temp_Order import Temp_order
from states.states import Registration, EditAccount, Support
from dob_func.dob_func import *
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

mongo_db = DB(config.MONGO_DB_URL, "login")
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
parallels = {
    "5": [["–ê", "–ë", "–í", "–ì", "–î", "–ï", "–ñ", "–ó", '–£'],
          ['–ë–∏–æ–ª–æ–≥–∏—è', "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ò–ó–û", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ú—É–∑—ã–∫–∞",
           "–û–î–ù–ö–†", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–¢—Ä—É–¥", "–£—á–µ–±–Ω—ã–π –ö—É—Ä—Å", "–§–∏–∑—Ä–∞"]],
    "6": [["–ê", "–ë", "–í", "–ì", "–î", "–ï", "–ñ", "–ó", "–ò", '–£'],
          ['–ë–∏–æ–ª–æ–≥–∏—è', "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ò–ó–û", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ú—É–∑—ã–∫–∞",
           "–û–î–ù–ö–†", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–¢—Ä—É–¥", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–§–∏–∑—Ä–∞"]],
    "7": [["–ê", "–ë", "–í", "–ì", "–î", "–ï", "–ñ", "–ó", "–ò"],
          ['–ë–∏–æ–ª–æ–≥–∏—è', "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ò–ó–û", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
           "–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ú—É–∑—ã–∫–∞",
           "–û–î–ù–ö–†", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–¢—Ä—É–¥", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–§–∏–∑—Ä–∞", "–§–∏–∑–∏–∫–∞"]],
    "8": [["–ê", "–ë", "–í", "–ì", "–î", "–ï", "–ñ", "–ó", "–ö"],
          ['–ë–∏–æ–ª–æ–≥–∏—è', "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
           "–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ú—É–∑—ã–∫–∞",
           "–û–î–ù–ö–†", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–¢—Ä—É–¥", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–§–∏–∑—Ä–∞", "–§–∏–∑–∏–∫–∞", "–û–ë–ñ"]],
    "9": [["–ê", "–ë", "–í", "–ì", "–î", "–ï", "–ñ", "–ö"],
          ['–ë–∏–æ–ª–æ–≥–∏—è', "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
           "–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ú—É–∑—ã–∫–∞",
           "–û–î–ù–ö–†", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–¢—Ä—É–¥", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–§–∏–∑—Ä–∞", "–§–∏–∑–∏–∫–∞", '–û–ë–ñ']],
    "10": [["–ê", "–ë", "–í", "–ì", "–ö"],
           ['–ë–∏–æ–ª–æ–≥–∏—è', "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
            "–ê–ª–≥–µ–±—Ä–∞ –∏ –Ω–∞—á–∞–ª–æ –º–∞—Ç. –∞–Ω–∞–ª–∏–∑–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ú—É–∑—ã–∫–∞",
            "–û–î–ù–ö–†", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–¢—Ä—É–¥", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–§–∏–∑—Ä–∞", "–§–∏–∑–∏–∫–∞", '–û–ë–ñ']],
    "11": [["–ê", "–ë", "–í", "–ì", "–ö"],
           ['–ë–∏–æ–ª–æ–≥–∏—è', "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
            "–ê–ª–≥–µ–±—Ä–∞ –∏ –Ω–∞—á–∞–ª–æ –º–∞—Ç. –∞–Ω–∞–ª–∏–∑–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ú—É–∑—ã–∫–∞",
            "–û–î–ù–ö–†", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–¢—Ä—É–¥", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–§–∏–∑—Ä–∞", "–§–∏–∑–∏–∫–∞", '–û–ë–ñ']]
}
type_items = {"–†–∞–±–æ—Ç–∞ –Ω–∞ —É—Ä–æ–∫–µ": 1, "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞": 1.04, "–ü—Ä–æ–≤–µ—Ä–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞": 1.05,
              "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞": 1.06}



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.username
    acc: User = await mongo_db.get_user(user_id)
    if acc is None:
        logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–∞–∂–∞–ª start")
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç.")
        await start_registration(user_id, state)
    else:
        if not acc.ban:
            await show_main_menu(user_id)
        else:
            logging.info(f"–∑–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–∞–∂–∞–ª start")
            await message.answer("üëã –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã")


@dp.callback_query(F.data == "order")
async def show_my_order(callback: types.CallbackQuery):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –æ—Ç–∫—Ä—ã–ª –∫–æ—Ä–∑–∏–∏–Ω—É")
    await show_order(callback.from_user.id)
    await callback.answer()


@dp.callback_query(F.data.startswith("*order-new_"))
async def show_admin_order(callback: types.CallbackQuery):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –æ—Ç–∫—Ä—ã–ª –∫–æ—Ä–∑–∏–∏–Ω—É")
    ids = callback.data.split('_')[1]
    order = await mongo_db.get_order(ids)
    await show_client_order(order, callback.from_user.id)
    await callback.answer()






@dp.callback_query(F.data.startswith("Orders_"))
async def start_create_account(callback: types.CallbackQuery):
    start = int(callback.data.split("_")[1])
    logging.info(f"–ê–¥–º–∏–Ω {callback.from_user.username} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –∑–∞–∫–∞–∑—ã c {start}")
    await show_orders_menu(callback.from_user.id, start)


@dp.callback_query(F.data == "my_accounts")
async def show_account(callback: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    :param callback: –§—É–Ω–∫—Ü–∏—è –í—ã–∑–æ–≤–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
    :return: None
    """
    user_id = callback.from_user.id
    acc: User = await mongo_db.get_user(user_id)
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –Ω–∞–∂–∞–ª –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç {show_acc(acc)}")
    text = (
        f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:\n\n"
        f"{show_acc(acc)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await send_or_edit_menu(
        user_id,
        text,
        edit_account_kb()
    )
    await callback.answer()


@dp.callback_query(F.data == "create_account")
async def start_create_account(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await start_registration(callback.from_user.id, state)
    await callback.answer()


@dp.callback_query(F.data == "delete_account")
async def start_create_account(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} —É–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç")
    acc = await mongo_db.get_user(callback.from_user.id)
    await mongo_db.delete_user(acc)
    await start_registration(callback.from_user.id, state)
    del user_menu_messages[callback.from_user.id]
    await callback.message.answer("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω")


@dp.callback_query(F.data == "cancel")
async def cancel_registration(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await state.clear()
    await show_main_menu(callback.from_user.id)
    await callback.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


@dp.callback_query(F.data == "back_to_parallels")
async def back_to_parallels(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –í–µ—Ä–Ω—É–ª—Å—è –∫ –ø–∞—Ä–∞–ª–µ–ª—è–º")
    await state.set_state(Registration.select_parallel)
    await send_or_edit_menu(
        callback.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å:",
        parallels_kb(parallels)
    )
    await callback.answer()


@dp.callback_query(F.data == "main_menu")
async def back_to_main(callback: types.CallbackQuery):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await show_main_menu(callback.from_user.id)
    await callback.answer()


@dp.callback_query(F.data == "add_corzin")
async def back_to_main(callback: types.CallbackQuery):
    acc = await mongo_db.get_user(callback.from_user.id)
    acc.order.products.append(
        Temp_order(id=str(uuid4()), object=acc.temp_order["–ø—Ä–µ–¥–º–µ—Ç"], quarter=acc.temp_order["–ß–µ—Ç–≤–µ—Ä—Ç—å"],
                   type=acc.temp_order["–¢–∏–ø –æ—Ü–µ–Ω–∫–∏"], estimation=acc.temp_order["–û—Ü–µ–Ω–∫–∞"],
                   price=int(
                       calculating_the_price({acc.temp_order["–¢–∏–ø –æ—Ü–µ–Ω–∫–∏"]: {"1 –û—Ü–µ–Ω–∫–∞": 0,
                                                                             "2 –û—Ü–µ–Ω–∫–∞":
                                                                                 acc.temp_order[
                                                                                     "–û—Ü–µ–Ω–∫–∞"],
                                                                             "–ø—Ä–µ–¥–º–µ—Ç":
                                                                                 acc.temp_order[
                                                                                     "–ø—Ä–µ–¥–º–µ—Ç"]}}))))
    acc.temp_order = {}
    await mongo_db.update_user(acc)
    logging.info(
        f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–∞—Ä–∑–∏–Ω—É —Ç–æ–≤–∞—Ä \n"
        f"{show_tofar(acc)} \n –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await show_main_menu(callback.from_user.id)
    await callback.answer()


@dp.callback_query(F.data == "order_zakaz")
async def back_to_main(callback: types.CallbackQuery):
    acc = await mongo_db.get_user(callback.from_user.id)
    acc.order.products.append(
        Temp_order(id=str(uuid4()), object=acc.temp_order["–ø—Ä–µ–¥–º–µ—Ç"], quarter=acc.temp_order["–ß–µ—Ç–≤–µ—Ä—Ç—å"],
                   type=acc.temp_order["–¢–∏–ø –æ—Ü–µ–Ω–∫–∏"], estimation=acc.temp_order["–û—Ü–µ–Ω–∫–∞"],
                   price=int(
                       calculating_the_price({acc.temp_order["–¢–∏–ø –æ—Ü–µ–Ω–∫–∏"]: {"1 –û—Ü–µ–Ω–∫–∞": 0,
                                                                             "2 –û—Ü–µ–Ω–∫–∞":
                                                                                 acc.temp_order[
                                                                                     "–û—Ü–µ–Ω–∫–∞"],
                                                                             "–ø—Ä–µ–¥–º–µ—Ç":
                                                                                 acc.temp_order[
                                                                                     "–ø—Ä–µ–¥–º–µ—Ç"]}}))))
    acc.temp_order = {}
    await mongo_db.update_user(acc)
    logging.info(
        f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–∞—Ä–∑–∏–Ω—É —Ç–æ–≤–∞—Ä \n"
        f"{show_tofar(acc)} \n –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É")
    await show_my_order(callback)


@dp.callback_query(F.data == "pay")
async def back_to_main(callback: types.CallbackQuery):
    acc = await mongo_db.get_user(callback.from_user.id)
    acc.order.price = sum(item.price * item.discount for item in acc.order.products)
    acc.order.full_name = acc.full_name
    acc.order.username = acc.username
    acc.order.parallel = acc.parallel
    acc.order.class_name = acc.class_name
    await mongo_db.insert_order(acc.order)
    acc.order = Orders(id=str(uuid4()), product=[])
    await mongo_db.update_user(acc)
    await send_admins(f"üéâ –í–∞–º –ø—Ä–∏—à—ë–ª –∑–∞–∫–∞–∑!", order_admin_menu_kb(), acc)
    logging.info(
        f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –ø –≤ –∫–∞—Ä–∑–∏–Ω—É —Ç–æ–≤–∞—Ä \n"
        f"{show_tofar(acc)} \n –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É")
    await show_main_menu(callback.from_user.id)


# –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞


@dp.callback_query(F.data == "Technical_support")
async def support(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –Ω–∞–∂–∞–ª –Ω–∞ —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫—É")
    await start_help(callback.from_user.id, state)
    await callback.answer()


@dp.callback_query(F.data == "_")
async def errorr(callback: types.CallbackQuery):
    await callback.answer()
    text = (
        "üåü –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üòì...\n"
        "–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"
    )
    await send_or_edit_menu(callback.from_user.id, text, error_menu_kb())




@dp.callback_query(F.data.startswith("parallel_"))
async def select_parallel(callback: types.CallbackQuery, state: FSMContext):
    parallel = callback.data.split("_")[1]
    await state.update_data(parallel=parallel)
    await state.set_state(Registration.select_class)
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –≤—ã–±—Ä–∞–ª –ø–∞—Ä–∞–ª–ª–µ–ª—å {parallel}")
    await send_or_edit_menu(
        callback.from_user.id,
        f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å {parallel}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:",
        classes_kb(parallel=parallel, parallels=parallels)
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("paralleledit_"))
async def edit_parallel(callback: types.CallbackQuery, state: FSMContext):
    parallel = callback.data.split("_")[1]
    account = await mongo_db.get_user(callback.from_user.id)
    account.parallel = parallel
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –∏–∑–º–µ–Ω–∏–ª –ø–∞—Ä–∞–ª–ª–µ–ª—å —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ {parallel}")
    await mongo_db.update_user(account)
    await state.clear()
    await callback.message.answer("‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
    await callback.answer()
    await show_main_menu(callback.from_user.id)


@dp.callback_query(F.data.startswith("class_"))
async def select_class(callback: types.CallbackQuery, state: FSMContext):
    class_name = callback.data.split("_")[1]
    await state.update_data(class_name=class_name)
    await state.set_state(Registration.enter_fio)
    await send_or_edit_menu(
        callback.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û, (–ù–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –æ—à–∏–±–æ–∫, –ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –ò–≤–∞–Ω–æ–≤):",
        InlineKeyboardBuilder().button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_parallels").as_markup()
    )
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –í–≤–æ–¥–∏—Ç –§–∏–æ")
    await callback.answer()


@dp.callback_query(F.data.startswith("edit_"))
async def start_edit_account(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    action = callback.data
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –∏–∑–º–µ–Ω—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç")
    if action == "edit_fio":
        logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –∏–∑–º–µ–Ω—è–µ—Ç –§–ò–û")
        await state.set_state(EditAccount.edit_fio)
        await send_or_edit_menu(
            user_id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:",
            InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu").as_markup()
        )
    elif action == "edit_parallel":
        logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –∏–∑–º–µ–Ω—è–µ—Ç –ø–∞—Ä–∞–ª–µ–ª—å")
        await state.set_state(EditAccount.edit_parallel)
        await send_or_edit_menu(
            user_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–∞—Ä–∞–ª–ª–µ–ª—å:",
            parallels_kb_edit(parallels)
        )
    elif action == "edit_class":
        logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –∏–∑–º–µ–Ω—è–µ—Ç –∫–ª–∞—Å—Å")
        await state.set_state(EditAccount.edit_class)
    await callback.answer()


@dp.callback_query(F.data.startswith("answer_"))
async def send_answer(callback: types.CallbackQuery):
    id_ = int(callback.data.split("_")[1])
    await send_or_edit_menu(
        id_,
        f"–í–∞–º –øÔ∏è—ÄÔ∏è–∏Ô∏è—àÔ∏è–ªÔ∏è–æÔ∏è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ {datetime.date.today()}!\n{callback.data.split("_")[2]}",
        InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu").as_markup()
    )
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –ø–æ–ª—É—á–º–ª –æ—Ç–≤–µ—Ç")
    await callback.answer()


@dp.message(Registration.enter_fio)
async def enter_fio(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    fio = message.text.strip().lower()

    if len(fio.split()) != 3:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û ")
        logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ –§–ò–û")
        return
    for i in fio.split():
        if len(i) < 2:
            await message.answer("–§–ò–û –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ –æ–¥–Ω–æ–π –±—É–∫–≤—ã")
            logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ –§–ò–û –º–µ–Ω—å—à–µ –¥–≤—É—Ö –±—É–∫–≤")
            return
        for j in i:
            if not j.lower() in "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è":
                await message.answer("–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¢–æ–ª—å–∫–æ –ë—É–∫–≤—ã")
                logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ –§–ò–û –Ω–µ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã")
                return

    data = await state.get_data()
    acc_ = await mongo_db.get_user_fio(fio)
    if acc_ is None:
        await mongo_db.insert_user(
            User(id=user_id, username=message.from_user.username, full_name=fio, parallel=data["parallel"],
                 class_name=data["class_name"].split()[1]))
        acc = await mongo_db.get_user(user_id)
        await state.clear()
        await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–æ–∑–¥–∞–ª –∞–∫–∫–∞—É–Ω—Ç\n {acc.model_dump()}")
        await show_main_menu(user_id)
    else:
        await message.answer("‚ùå–¢–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –µ—Å—Ç—å")
        logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç \n{acc_.model_dump()}")
        await state.set_state(EditAccount.edit_class)
        data = await state.get_data()
        await send_or_edit_menu(
            user_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å:",
            classes_kb(parallels=parallels, parallel=data['parallel'])
        )


@dp.message(EditAccount.edit_fio)
async def edit_fio(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    fio = message.text.strip().lower()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
    parts = fio.split()
    if len(parts) != 3:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ'.")
        logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤–≤—ë–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –§–ò–û")
        return

    surname, name, patronymic = parts

    if not len(surname) >= 2 and not len(name) >= 2 and not len(patronymic) >= 2:
        await message.answer("–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏ –¥–µ—Ñ–∏—Å—ã.")
        logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤–≤—ë–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –§–ò–û")
        return

    account = await mongo_db.get_user(user_id)
    account.full_name = fio
    await mongo_db.update_user(account)
    await state.clear()
    await message.answer("‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –∏–∑–º–µ–Ω–∏–ª –§–ò–û –Ω–∞ {fio}")
    await show_main_menu(user_id)


@dp.message(Support.message)
async def edit_fio(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    messages = message.text.strip()
    acc = await mongo_db.get_user(user_id)
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–µ:\n{messages}")
    request = Reqwest(id_=str(uuid4())[:8], user_id=user_id, username=message.from_user.username, messages=messages,
                      type="–°–æ–æ–±—â–µ–Ω–∏–µ")
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—é")
    await state.clear()
    await send_admins(f"{datetime.date.today()} - {messages}", support_admin_menu_kb(user_id), acc)
    # await show_main_menu(user_id)



async def main():
    logging.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    dp.include_router(helps_handlers.router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.info(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    asyncio.run(main())
