import logging
from uuid import uuid4
import typing

from aiogram.fsm.context import FSMContext

import config
import func.prices as pc
from db.db import DB
from keyboards.keyboard import (help_menu_kb,
                                support_menu_kb,
                                parallels_kb,
                                orders_admin_menu_kb,
                                korzin_null,
                                order_kb_show,
                                predmet_menu_kb,
                                main_menu_kb,
                                orders_menu_kb,
                                technical_support_menu_kb)
from model.order import Orders
from model.reqwest import Reqwest
from model.temp_order import TempOrder
from model.user import User
from states.states import Support, Registration

user_menu_messages = {}

mongo_db = DB(config.MONGO_DB_URL, "login")
parallels = config.parallels


def show_acc(acc: User):
    return (f"–ò–º—è - {acc.full_name.capitalize()}\n–ö–ª–∞—Å—Å - {acc.parallel} {acc.class_name}\n–ë–∞–ª–∞–Ω—Å - "
            f"{acc.balance}‚ÇΩ\n–£—Ä–æ–≤–µ–Ω—å –∞–∫–∫–∞—É–Ω—Ç–∞ - {acc.desired_rating}")


def show_product(acc: User, _id=-1):
    return (f"ID - {acc.order.products[_id].id[:8]}\n"
            f"–¢–∏–ø –æ—Ü–µ–Ω–∫–∏ - {acc.order.products[_id].type}\n"
            f"–ß–µ—Ç–≤–µ—Ä—Ç—å - {acc.order.products[_id].quarter}\n"
            f"–ü—Ä–µ–¥–º–µ—Ç - {acc.order.products[_id].object}\n"
            f"–û—Ü–µ–Ω–∫–∞ - {acc.order.products[_id].estimation}\n"
            f"–¶–µ–Ω–∞ - {acc.order.products[_id].price}\n")


def show_orders(acc: Orders, _id=-1):
    return (f"ID - {acc.products[_id].id[:8]}\n"
            f"–¢–∏–ø –æ—Ü–µ–Ω–∫–∏ - {acc.products[_id].type}\n"
            f"–ß–µ—Ç–≤–µ—Ä—Ç—å - {acc.products[_id].quarter}\n"
            f"–ü—Ä–µ–¥–º–µ—Ç - {acc.products[_id].object}\n"
            f"–û—Ü–µ–Ω–∫–∞ - {acc.products[_id].estimation}\n"
            f"–¶–µ–Ω–∞ - {acc.products[_id].price}\n")


async def create_temp_order(user_id: int):
    acc = await mongo_db.get_user(user_id)
    price_dict = {acc.temp_order["–¢–∏–ø –æ—Ü–µ–Ω–∫–∏"]: {
        "1 –û—Ü–µ–Ω–∫–∞": 0,
        "2 –û—Ü–µ–Ω–∫–∞": acc.temp_order["–û—Ü–µ–Ω–∫–∞"],
        "–ø—Ä–µ–¥–º–µ—Ç": acc.temp_order["–ø—Ä–µ–¥–º–µ—Ç"]}}
    price = int(pc.calculating_the_price(price_dict))
    temp_order = TempOrder(id=str(uuid4()),
                           object=acc.temp_order["–ø—Ä–µ–¥–º–µ—Ç"],
                           quarter=acc.temp_order["–ß–µ—Ç–≤–µ—Ä—Ç—å"],
                           type=acc.temp_order["–¢–∏–ø –æ—Ü–µ–Ω–∫–∏"],
                           estimation=acc.temp_order["–û—Ü–µ–Ω–∫–∞"],
                           price=price)
    acc.order.products.append(temp_order)
    acc.temp_order = {}
    await mongo_db.update_user(acc)
    acc = await mongo_db.get_user(user_id)
    return acc


async def show_orders_menu(user_id: int, start=0):
    logging.info(f"–∞–¥–º–∏–Ω {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤")
    orders = await mongo_db.get_all_orders()
    orders = list(Orders(**i) for i in orders)[::-1]
    text = (
        "üåü –ó–∞–∫–∞–∑—ã:\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(orders)}"
    )
    await send_or_edit_menu(user_id, text, orders_menu_kb(orders, start))


async def technical_support_orders_menu(user_id: int, start=0):
    logging.info(f"–∞–¥–º–∏–Ω {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤")
    orders = await mongo_db.get_all_reqwest()
    orders = list(Reqwest(**i) for i in orders)[::-1]
    text = (
        "üåü –û–±—Ä–∞—â–µ–Ω–∏—è:\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –û–±—Ä–∞—â–µ–Ω–∏–π: {len(orders)}"
    )
    await send_or_edit_menu(user_id, text, technical_support_menu_kb(orders, start))


async def show_order(user_id: int):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –∫–æ—Ä–∑–∏–Ω—É")
    a = list()
    acc = await mongo_db.get_user(user_id)
    b = 0.00
    for number, i in enumerate(acc.order.products):
        text = str(f"–¢–æ–≤–∞—Ä ‚Ññ{int(number) + 1} : \n {show_product(acc, number)}")
        a.append(text)
        b = float(sum(list(acc.order.products[number].price for number, i in enumerate(acc.order.products))))
    if acc.order.products:
        text = (
            "üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞\n"
            f"üìô –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã\n============\n{"\n --------------------".join(a)}"
            f"============\n –û–±—â–∞—è —Ü–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ {b} —Ä—É–±–ª–µ–π ‚ÇΩ"
        )
        logging.info(f"—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∫–æ—Ä–∑–∏–Ω–∞:{"\n -------------------- \n".join(a)}")
        await send_or_edit_menu(user_id, text, order_kb_show(acc))
    else:
        text = (
            "üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞\n"
            f"üìô –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.. –ñ–µ–ª–∞–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º?\n"
        )
        logging.info(f"—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞")
        await send_or_edit_menu(user_id, text, korzin_null())


async def show_client_order(order: Orders, admin_id):
    logging.info(f"–ê–¥–º–∏–Ω {admin_id} –°–º–æ—Ç—Ä–∏—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order.username} - {order.id}")
    a = list()
    b = 0.00
    for number, i in enumerate(order.products):
        text = str(f"–¢–æ–≤–∞—Ä ‚Ññ{int(number) + 1} : \n {show_orders(order, number)}")
        a.append(text)
        b = float(sum(list(order.products[number].price for number, i in enumerate(order.products))))
    text = (
        "üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞\n"
        f"üìô –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã\n============\n{"--------------------\n".join(a)}"
        f"============\n –û–±—â–∞—è —Ü–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ {b} —Ä—É–±–ª–µ–π ‚ÇΩ"
    )
    await send_or_edit_menu(admin_id, text, orders_admin_menu_kb())


async def show_client_reqwest(order: Reqwest, admin_id):
    logging.info(f"–ê–¥–º–∏–Ω {admin_id} –°–º–æ—Ç—Ä–∏—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order.username} - {order.user_id}")
    text = (
        f"üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –ó–∞–ø—Ä–æ—Å –æ—Ç {order.username}\n"
        f"üìô –í—Ä–µ–º—è - {order.datetime}. –¢–∏–ø - {order.type}\n{order.messages}"
    )
    await send_or_edit_menu(admin_id, text, orders_admin_menu_kb())


async def send_admins(text: str, keyboard, user: User):
    admins = await mongo_db.get_admins()
    for admin in admins:
        await send_or_edit_menu(admin.id,
                                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} - {user.id} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å:\n{text.capitalize()}",
                                keyboard)


async def send_or_edit_menu(user_id: int, text: str, keyboard):
    try:
        if user_id in user_menu_messages:
            await config.bot.edit_message_text(
                chat_id=user_id,
                message_id=user_menu_messages[user_id],
                text=text,
                reply_markup=keyboard
            )
        else:
            msg = await config.bot.send_message(user_id, text, reply_markup=keyboard)
            user_menu_messages[user_id] = msg.message_id
    except Exception:
        msg = await config.bot.send_message(user_id, text, reply_markup=keyboard)
        user_menu_messages[user_id] = msg.message_id


async def show_main_menu(user_id: int):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    text = (
        "üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏, "
        "–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–º–æ—â—å."
    )
    acc = await mongo_db.get_user(user_id)
    await send_or_edit_menu(user_id, text, main_menu_kb(acc))


async def start_help(user_id: int, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫—É")
    await state.set_state(Support.message)
    await send_or_edit_menu(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–µ",
        support_menu_kb()
    )


async def show_object_menu(user_id: int):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞")
    text = (
        "üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ "
        "üìô –í—ã–±–µ—Ä–∏—Ç–µ –ü—Ä–µ–¥–º–µ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"
    )
    account: User = await mongo_db.get_user(user_id)
    await send_or_edit_menu(user_id, text, predmet_menu_kb(parallels=parallels, paralell=str(account.parallel)))


async def start_registration(user_id: int, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await state.set_state(Registration.select_parallel)
    await send_or_edit_menu(
        user_id,
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å:",
        parallels_kb(parallels)
    )

async def help_menu(user_id: int,text:str, buttons):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ø–æ–º–æ—â–∏")
    await send_or_edit_menu(user_id, text, help_menu_kb(buttons))


