import logging

from aiogram.fsm.context import FSMContext

import config
from keyboards.keyboard import (help_menu_kb,
                                support_menu_kb,
                                parallels_kb,
                                orders_admin_menu_kb,
                                predmet_menu_kb,
                                main_menu_kb)
from model.reqwest import Reqwest
from model.user import User
from states.states import Support, Registration

user_menu_messages = {}

mongo_db = config.mongo_db
parallels = config.parallels


async def send_or_edit_menu(user_id: int, text: str, keyboard):
    try:
        if user_id in user_menu_messages:
            await config.bot.edit_message_text(
                chat_id=user_id,
                message_id=user_menu_messages[user_id],
                text=text,
                reply_markup=keyboard
            )
        else:
            msg = await config.bot.send_message(user_id, text, reply_markup=keyboard)
            user_menu_messages[user_id] = msg.message_id
    except Exception:
        msg = await config.bot.send_message(user_id, text, reply_markup=keyboard)
        user_menu_messages[user_id] = msg.message_id


async def show_client_reqwest(order: Reqwest, admin_id):
    logging.info(f"–ê–¥–º–∏–Ω {admin_id} –°–º–æ—Ç—Ä–∏—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order.username} - {order.user_id}")
    text = (
        f"üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –ó–∞–ø—Ä–æ—Å –æ—Ç {order.username}\n"
        f"üìô –í—Ä–µ–º—è - {order.datetime}. –¢–∏–ø - {order.type}\n{order.messages}"
    )
    await send_or_edit_menu(admin_id, text, orders_admin_menu_kb())


async def send_admins(text: str, keyboard, user: User):
    admins = await mongo_db.get_admins()
    for admin in admins:
        await send_or_edit_menu(admin.id,
                                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} - {user.id} –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å:\n{text.capitalize()}",
                                keyboard)


async def show_main_menu(user_id: int):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    text = (
        "üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏, "
        "–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–º–æ—â—å."
    )
    acc = await mongo_db.get_user(user_id)
    await send_or_edit_menu(user_id, text, main_menu_kb(acc))


async def start_help(user_id: int, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫—É")
    await state.set_state(Support.message)
    await send_or_edit_menu(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–µ",
        support_menu_kb()
    )


async def show_object_menu(user_id: int):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞")
    text = (
        "üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ "
        "üìô –í—ã–±–µ—Ä–∏—Ç–µ –ü—Ä–µ–¥–º–µ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"
    )
    account: User = await mongo_db.get_user(user_id)
    await send_or_edit_menu(user_id, text, predmet_menu_kb(parallels=parallels, paralell=str(account.parallel)))


async def start_registration(user_id: int, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await state.set_state(Registration.select_parallel)
    await send_or_edit_menu(
        user_id,
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å:",
        parallels_kb(parallels)
    )


async def help_menu(user_id: int, text: str, buttons):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ø–æ–º–æ—â–∏")
    await send_or_edit_menu(user_id, text, help_menu_kb(buttons))
