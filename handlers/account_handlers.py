from aiogram import Router, F
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder

from dob_func.dob_func import *
from keyboards.keyboard import classes_kb, parallels_kb_edit, parallels_kb, edit_account_kb
from main import *
from model.User import User
from states.states import Registration, EditAccount

router = Router()
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")


@router.callback_query(F.data == "my_accounts")
async def show_account(callback: types.CallbackQuery, router: Router):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    :param callback: –§—É–Ω–∫—Ü–∏—è –í—ã–∑–æ–≤–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
    :return: Nots
    """
    user_id = callback.from_user.id
    acc: User = await mongo_db.get_user(user_id)
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –Ω–∞–∂–∞–ª –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç {show_acc(acc)}")
    text = (
        f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:\n\n"
        f"{show_acc(acc)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await send_or_edit_menu(router,
        user_id,
        text,
        edit_account_kb()
    )
    await callback.answer()


@router.callback_query(F.data == "create_account")
async def start_create_account(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await start_registration(callback.from_user.id, state)
    await callback.answer()


@router.callback_query(F.data == "delete_account")
async def start_create_account(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} —É–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç")
    acc = await mongo_db.get_user(callback.from_user.id)
    await mongo_db.delete_user(acc)
    await start_registration(callback.from_user.id, state)
    del user_menu_messages[callback.from_user.id]
    await callback.message.answer("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω")


@router.callback_query(F.data == "cancel")
async def cancel_registration(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await state.clear()
    await show_main_menu(callback.from_user.id)
    await callback.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.callback_query(F.data == "back_to_parallels")
async def back_to_parallels(callback: types.CallbackQuery, state: FSMContext,router:Router):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –í–µ—Ä–Ω—É–ª—Å—è –∫ –ø–∞—Ä–∞–ª–µ–ª—è–º")
    await state.set_state(Registration.select_parallel)
    await send_or_edit_menu(router,
        callback.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å:",
        parallels_kb(parallels)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("paralleledit_"))
async def edit_parallel(callback: types.CallbackQuery, state: FSMContext,router:Router):
    parallel = callback.data.split("_")[1]
    account = await mongo_db.get_user(callback.from_user.id)
    account.parallel = parallel
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –∏–∑–º–µ–Ω–∏–ª –ø–∞—Ä–∞–ª–ª–µ–ª—å —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ {parallel}")
    await mongo_db.update_user(account)
    await state.clear()
    await callback.message.answer("‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
    await show_main_menu(callback.from_user.id)


@router.callback_query(F.data.startswith("edit_"))
async def start_edit_account(callback: types.CallbackQuery, state: FSMContext,router:Router):
    user_id = callback.from_user.id
    action = callback.data
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –∏–∑–º–µ–Ω—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç")
    if action == "edit_fio":
        logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –∏–∑–º–µ–Ω—è–µ—Ç –§–ò–û")
        await state.set_state(EditAccount.edit_fio)
        await send_or_edit_menu(router,
            user_id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:",
            InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu").as_markup()
        )
    elif action == "edit_parallel":
        logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –∏–∑–º–µ–Ω—è–µ—Ç –ø–∞—Ä–∞–ª–µ–ª—å")
        await state.set_state(EditAccount.edit_parallel)
        await send_or_edit_menu(router,
            user_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–∞—Ä–∞–ª–ª–µ–ª—å:",
            parallels_kb_edit(parallels)
        )
    elif action == "edit_class":
        logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –∏–∑–º–µ–Ω—è–µ—Ç –∫–ª–∞—Å—Å")
        await state.set_state(EditAccount.edit_class)
    await callback.answer()


@router.callback_query(F.data.startswith("class_"))
async def select_class(callback: types.CallbackQuery, state: FSMContext):
    class_name = callback.data.split("_")[1]
    await state.update_data(class_name=class_name)
    await state.set_state(Registration.enter_fio)
    await send_or_edit_menu(
        callback.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û, (–ù–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –æ—à–∏–±–æ–∫, –ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –ò–≤–∞–Ω–æ–≤):",
        InlineKeyboardBuilder().button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_parallels").as_markup()
    )
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –í–≤–æ–¥–∏—Ç –§–∏–æ")
    await callback.answer()


@router.callback_query(F.data.startswith("parallel_"))
async def select_parallel(callback: types.CallbackQuery, state: FSMContext):
    parallel = callback.data.split("_")[1]
    await state.update_data(parallel=parallel)
    await state.set_state(Registration.select_class)
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –≤—ã–±—Ä–∞–ª –ø–∞—Ä–∞–ª–ª–µ–ª—å {parallel}")
    await send_or_edit_menu(
        callback.from_user.id,
        f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å {parallel}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:",
        classes_kb(parallel=parallel, parallels=parallels)
    )
    await callback.answer()
