from aiogram import Router

from main import *

router = Router()
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")


@router.callback_query(F.data == "my_accounts")
async def show_account(callback: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    :param callback: –§—É–Ω–∫—Ü–∏—è –í—ã–∑–æ–≤–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
    :return: None
    """
    user_id = callback.from_user.id
    acc: User = await mongo_db.get_user(user_id)
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –Ω–∞–∂–∞–ª –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç {show_acc(acc)}")
    text = (
        f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:\n\n"
        f"{show_acc(acc)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await send_or_edit_menu(
        user_id,
        text,
        edit_account_kb()
    )
    await callback.answer()


@router.callback_query(F.data == "create_account")
async def start_create_account(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await start_registration(callback.from_user.id, state)
    await callback.answer()


@router.callback_query(F.data == "delete_account")
async def start_create_account(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} —É–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç")
    acc = await mongo_db.get_user(callback.from_user.id)
    await mongo_db.delete_user(acc)
    await start_registration(callback.from_user.id, state)
    del user_menu_messages[callback.from_user.id]
    await callback.message.answer("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω")


@router.callback_query(F.data == "cancel")
async def cancel_registration(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await state.clear()
    await show_main_menu(callback.from_user.id)
    await callback.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.callback_query(F.data == "back_to_parallels")
async def back_to_parallels(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –í–µ—Ä–Ω—É–ª—Å—è –∫ –ø–∞—Ä–∞–ª–µ–ª—è–º")
    await state.set_state(Registration.select_parallel)
    await send_or_edit_menu(
        callback.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å:",
        parallels_kb(parallels)
    )
    await callback.answer()
