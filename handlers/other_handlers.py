import asyncio
import datetime

from aiogram import Router, F
from aiogram import types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from Nots.test import *
from dob_func.dob_func_ import *
from keyboards.keyboard import error_menu_kb
from model.user import User

router = Router()
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
type_items = {"–†–∞–±–æ—Ç–∞ –Ω–∞ —É—Ä–æ–∫–µ": 1, "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞": 1.04, "–ü—Ä–æ–≤–µ—Ä–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞": 1.05,
              "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞": 1.06}


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.username
    acc: User = await mongo_db.get_user(user_id)
    if acc is None:
        logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–∞–∂–∞–ª start")
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç.")
        await start_registration(user_id, state)
    else:
        if not acc.ban:
            await show_main_menu(user_id)
        else:
            logging.info(f"–∑–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–∞–∂–∞–ª start")
            await message.answer("üëã –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã")


@router.callback_query(F.data == "main_menu")
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_name = callback.from_user.username
    acc: User = await mongo_db.get_user(user_id)
    if acc is None:
        logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–∞–∂–∞–ª start")
        await callback.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç.")
        await start_registration(user_id, state)
    else:
        if not acc.ban:
            logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await show_main_menu(callback.from_user.id)
            await callback.answer()
        else:
            logging.info(f"–∑–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–∞–∂–∞–ª start")
            await callback.answer("üëã –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã")


@router.callback_query(F.data == "Technical_support")
async def support(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –Ω–∞–∂–∞–ª –Ω–∞ —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫—É")
    await start_help(callback.from_user.id, state)
    await callback.answer()


@router.callback_query(F.data == "_")
async def error(callback: types.CallbackQuery):
    """ –û—à–∏–±–∫–∞ —Ö–∞–Ω–¥–ª–µ—Ä–∞"""
    await callback.answer()
    text = (
        "üåü –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üòì...\n"
        "–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"
    )
    await send_or_edit_menu(callback.from_user.id, text, error_menu_kb())


@router.callback_query(F.data.startswith("answer_"))
async def send_answer(callback: types.CallbackQuery):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    id_ = int(callback.data.split("_")[1])
    await send_or_edit_menu(id_,
                            f"–í–∞–º –øÔ∏è—ÄÔ∏è–∏Ô∏è—àÔ∏è–ªÔ∏è–æÔ∏è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ {datetime.date.today()}!\n"
                            f"{callback.data.split("_")[2]}",
                            InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                                           callback_data="main_menu").as_markup())
    logging.info(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç")
    await callback.answer()


@router.callback_query(F.data == "homework")
async def homework(callback: types.CallbackQuery):
    """ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–º–∞—à–Ω–µ—é —Ä–∞–±–æ—Ç—É"""
    id_ = int(callback.from_user.id)
    acc = await mongo_db.get_user(id_)
    auth = SchoolAuth()

    # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    await callback.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")
    progress_msg = await callback.message.answer("üåë –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")

    # –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    stop_event = asyncio.Event()

    # –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    async def animate_progress():
        frames = ["üåë", "üåí", "üåì", "üåî", "üåï", "üåñ", "üåó", "üåò"]
        while not stop_event.is_set():
            for frame in frames:
                if stop_event.is_set():
                    break
                await progress_msg.edit_text(f"{frame} –ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞...")
                await asyncio.sleep(0.3)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    animation_task = asyncio.create_task(animate_progress())

    try:
        result = "–ù–∏—á–µ–≥–æ –Ω–µ –∑–∞–¥–∞–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        if auth.login(config.USER_LOGIN, config.USER_PASSWORD):
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ –ø–æ—Ç–æ–∫–µ
            result = await asyncio.to_thread(
                set_homework,
                f"{acc.parallel} {acc.class_name.lower()}",
                type="recent",
                auth=auth
            )

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        stop_event.set()
        await animation_task

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        await progress_msg.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_or_edit_menu(id_, f"{result}",
                                InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                                               callback_data="main_menu").as_markup())

    except Exception as e:
        stop_event.set()
        await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
